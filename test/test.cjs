// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ava = require("rescript-ava/src/ava.cjs");
var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");

Ava.test("Map.make()", (function (t) {
        var map = new Map();
        return Ava.true_(t, map.size === 0, undefined, undefined);
      }));

Ava.test("Map.make(entries)", (function (t) {
        var map = new Map([[
                "hello",
                "world"
              ]]);
        Ava.true_(t, map.size === 1, undefined, undefined);
        var map$1 = new Map([[
                12,
                undefined
              ]]);
        Ava.true_(t, map$1.size === 1, undefined, undefined);
        var map$2 = new Map([[
                null,
                undefined
              ]]);
        return Ava.true_(t, map$2.size === 1, undefined, undefined);
      }));

Ava.test("Map.has(map, key)", (function (t) {
        var map = new Map([[
                "hello",
                "world"
              ]]);
        return Ava.true_(t, map.has("hello"), undefined, undefined);
      }));

Ava.test("Map.clear(map)", (function (t) {
        var map = new Map([[
                "hello",
                "world"
              ]]);
        Ava.true_(t, map.has("hello"), undefined, undefined);
        Ava.true_(t, map.size === 1, undefined, undefined);
        map.clear();
        Ava.false_(t, map.has("hello"), undefined, undefined);
        return Ava.true_(t, map.size === 0, undefined, undefined);
      }));

Ava.test("Map.get(map, key)", (function (t) {
        var map = new Map([[
                "hello",
                "world"
              ]]);
        return Ava.true_(t, Caml_obj.caml_equal(map.get("hello"), "world"), undefined, undefined);
      }));

Ava.test("Map.delete(map, key)", (function (t) {
        var map = new Map([[
                "hello",
                "world"
              ]]);
        Ava.true_(t, map.has("hello"), undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(map.get("hello"), "world"), undefined, undefined);
        map.delete("hello");
        Ava.true_(t, map.get("hello") === undefined, undefined, undefined);
        return Ava.false_(t, map.has("hello"), undefined, undefined);
      }));

Ava.test("Map.set(map, key, value)", (function (t) {
        var map = new Map();
        Ava.false_(t, map.has("foo"), undefined, undefined);
        Ava.true_(t, map.size === 0, undefined, undefined);
        Ava.true_(t, map.get("foo") === undefined, undefined, undefined);
        map.set("foo", "bar");
        Ava.true_(t, map.has("foo"), undefined, undefined);
        Ava.true_(t, map.size === 1, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(map.get("foo"), "bar"), undefined, undefined);
        var map$1 = new Map();
        Ava.false_(t, map$1.has(42), undefined, undefined);
        Ava.true_(t, map$1.size === 0, undefined, undefined);
        Ava.true_(t, map$1.get(42) === undefined, undefined, undefined);
        map$1.set(42, "bar");
        Ava.true_(t, map$1.has(42), undefined, undefined);
        Ava.true_(t, map$1.size === 1, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(map$1.get(42), "bar"), undefined, undefined);
        var map$2 = new Map();
        var fnKey = function (param) {
          return 1;
        };
        var fnVal = function (rest) {
          return "12" + rest;
        };
        Ava.false_(t, map$2.has(fnKey), undefined, undefined);
        Ava.true_(t, map$2.size === 0, undefined, undefined);
        Ava.true_(t, map$2.get(fnKey) === undefined, undefined, undefined);
        map$2.set(fnKey, fnVal);
        Ava.true_(t, map$2.has(fnKey), undefined, undefined);
        Ava.true_(t, map$2.size === 1, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(map$2.get(fnKey), fnVal), undefined, undefined);
        var fn = map$2.get(fnKey);
        if (fn !== undefined) {
          return Ava.true_(t, Curry._1(fn, "34") === "1234", undefined, undefined);
        } else {
          return Ava.fail(t, undefined, undefined);
        }
      }));

Ava.test("Map.keys(map)", (function (t) {
        var map = new Map([
              [
                "a",
                "a"
              ],
              [
                "b",
                "b"
              ]
            ]);
        var iterator = map.keys();
        var next = iterator.next();
        Ava.false_(t, next.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next.value, "a"), undefined, undefined);
        var next$1 = iterator.next();
        Ava.false_(t, next$1.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next$1.value, "b"), undefined, undefined);
        var next$2 = iterator.next();
        Ava.true_(t, next$2.done, undefined, undefined);
        Ava.true_(t, next$2.value === undefined, undefined, undefined);
        var next$3 = iterator.next();
        Ava.true_(t, next$3.done, undefined, undefined);
        return Ava.true_(t, next$3.value === undefined, undefined, undefined);
      }));

Ava.test("Map.values(map)", (function (t) {
        var map = new Map([
              [
                "1",
                1
              ],
              [
                "2",
                2
              ]
            ]);
        var iterator = map.values();
        var next = iterator.next();
        Ava.false_(t, next.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next.value, 1), undefined, undefined);
        var next$1 = iterator.next();
        Ava.false_(t, next$1.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next$1.value, 2), undefined, undefined);
        var next$2 = iterator.next();
        Ava.true_(t, next$2.done, undefined, undefined);
        Ava.true_(t, next$2.value === undefined, undefined, undefined);
        var next$3 = iterator.next();
        Ava.true_(t, next$3.done, undefined, undefined);
        return Ava.true_(t, next$3.value === undefined, undefined, undefined);
      }));

Ava.test("Map.entries(map)", (function (t) {
        var map = new Map([
              [
                "1",
                1
              ],
              [
                "2",
                2
              ]
            ]);
        var iterator = map.entries();
        var next = iterator.next();
        Ava.false_(t, next.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next.value, [
                  "1",
                  1
                ]), undefined, undefined);
        var next$1 = iterator.next();
        Ava.false_(t, next$1.done, undefined, undefined);
        Ava.true_(t, Caml_obj.caml_equal(next$1.value, [
                  "2",
                  2
                ]), undefined, undefined);
        var next$2 = iterator.next();
        Ava.true_(t, next$2.done, undefined, undefined);
        Ava.true_(t, next$2.value === undefined, undefined, undefined);
        var next$3 = iterator.next();
        Ava.true_(t, next$3.done, undefined, undefined);
        return Ava.true_(t, next$3.value === undefined, undefined, undefined);
      }));

Ava.test("Map.forEach(map, fn)", (function (t) {
        var map = new Map().set("hello", "world").set("foo", "bar").set("cheese", "burger");
        var size = {
          contents: 0
        };
        var keyChain = {
          contents: ""
        };
        var valueChain = {
          contents: ""
        };
        map.forEach(function (value, key) {
              size.contents = size.contents + 1 | 0;
              keyChain.contents = keyChain.contents + key;
              valueChain.contents = valueChain.contents + value;
              
            });
        Ava.true_(t, size.contents === 3, undefined, undefined);
        Ava.true_(t, keyChain.contents === "hellofoocheese", undefined, undefined);
        return Ava.true_(t, valueChain.contents === "worldbarburger", undefined, undefined);
      }));

Ava.test("Map.forEachWithMap(map, fn)", (function (t) {
        var map = new Map().set(12, "world").set(12, "bar").set(10, "burger");
        var size = {
          contents: 0
        };
        var keyChain = {
          contents: 0
        };
        var valueChain = {
          contents: ""
        };
        map.forEach(function (value, key, $$this) {
              size.contents = size.contents + 1 | 0;
              keyChain.contents = keyChain.contents + key | 0;
              valueChain.contents = valueChain.contents + value;
              Ava.true_(t, Caml_obj.caml_equal(map, $$this), undefined, undefined);
              return Ava.true_(t, map === $$this, undefined, undefined);
            });
        Ava.true_(t, size.contents === 2, undefined, undefined);
        Ava.true_(t, keyChain.contents === 22, undefined, undefined);
        return Ava.true_(t, valueChain.contents === "barburger", undefined, undefined);
      }));

var Iterator;

var $$Map$1;

exports.Iterator = Iterator;
exports.$$Map = $$Map$1;
/*  Not a pure module */
